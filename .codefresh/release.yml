version: "1.0"

stages:
  - "clone"
  - "build"
  - "package"
  - "test"  
  - "publish"
  - "release"

steps:
  init:
    title: Init
    stage: clone
    image: codefresh/cli
    shell: bash
    commands:
      - cf_export GITHUB_TOKEN=$(codefresh get context github --decrypt -o yaml | yq -y .spec.data.auth.password)
      - export MAIN_REPO_NAME=cli
      - cf_export MAIN_REPO_NAME=${MAIN_REPO_NAME}
      - cf_export MAIN_REPO_PATH=/codefresh/volume/${MAIN_REPO_NAME}.git
      - export MOCK_DATA_REPO_NAME=mock-data
      - cf_export MOCK_DATA_REPO_NAME=${MOCK_DATA_REPO_NAME}
      - cf_export MOCK_DATA_REPO_PATH=/codefresh/volume/${MOCK_DATA_REPO_NAME}.git
      - export CICD_REPO_NAME=cicd
      - cf_export CICD_REPO_NAME=${CICD_REPO_NAME}
      - cf_export CICD_REPO_PATH=/codefresh/volume/${CICD_REPO_NAME}.git
      - export DEMOS_REPO_NAME=demos
      - cf_export DEMOS_REPO_NAME=${DEMOS_REPO_NAME}
      - cf_export DEMOS_REPO_PATH=/codefresh/volume/${DEMOS_REPO_NAME}.git
      - cf_export SAMPLES_PATH=/codefresh/volume/samples
      - export HOMEBREW_TAP_REPO_NAME=homebrew-cli
      - cf_export HOMEBREW_TAP_REPO_NAME=${HOMEBREW_TAP_REPO_NAME}
      - cf_export HOMEBREW_TAP_REPO_PATH=/codefresh/volume/${HOMEBREW_TAP_REPO_NAME}.git    
      - export CLI_RELEASES_REPO_NAME=cli-releases
      - cf_export CLI_RELEASES_REPO_NAME=${CLI_RELEASES_REPO_NAME}
      - cf_export CLI_RELEASES_REPO_PATH=/codefresh/volume/${CLI_RELEASES_REPO_NAME}.git
      - cf_export CF_REPO_OWNER=kubevious
      - export PRODUCT_NAME=cli
      - export IMAGE_NAME=kubevious/${PRODUCT_NAME}
      - cf_export IMAGE_NAME=${IMAGE_NAME}
      - 'echo "Image Name: ${IMAGE_NAME}"'


  clone:
    title: Clone Repo
    stage: clone
    image: "alpine/git:latest"
    working_directory: "/codefresh/volume"
    commands:
      - pwd
      - ls -la
      - rm -rf ${{MAIN_REPO_PATH}}
      - "git clone https://${{CF_REPO_OWNER}}:${{GITHUB_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{MAIN_REPO_NAME}}.git ${{MAIN_REPO_PATH}}"
      - ls -la
      - cd ${{MAIN_REPO_PATH}}
      - ls -la

  clone_cicd:
    title: Clone CI/CD Repo
    stage: clone
    image: "alpine/git:latest"
    working_directory: "/codefresh/volume"
    commands:
      - pwd
      - ls -la
      - rm -rf ${{CICD_REPO_PATH}}
      - "git clone https://${{CF_REPO_OWNER}}:${{GITHUB_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{CICD_REPO_NAME}}.git ${{CICD_REPO_PATH}}"
      - ls -la
      - cd ${{CICD_REPO_PATH}}
      - ls -la

  clone_mock_data:
    title: Clone Mock Data Repo
    stage: clone
    image: "alpine/git:latest"
    working_directory: "/codefresh/volume"
    commands:
      - pwd
      - ls -la
      - rm -rf ${{MOCK_DATA_REPO_PATH}}
      - "git clone https://${{CF_REPO_OWNER}}:${{GITHUB_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{MOCK_DATA_REPO_NAME}}.git ${{MOCK_DATA_REPO_PATH}}"
      - ls -la
      - cd ${{MOCK_DATA_REPO_PATH}}
      - ls -la

  clone_demos:
    title: Clone Demos Repo
    stage: clone
    image: 'alpine/git:latest'
    working_directory: "/codefresh/volume"
    commands:
      - pwd
      - ls -la
      - rm -rf ${{DEMOS_REPO_PATH}}
      - 'git clone https://${{CF_REPO_OWNER}}:${{GITHUB_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{DEMOS_REPO_NAME}}.git ${{DEMOS_REPO_PATH}}'
      - ls -la
      - cd ${{DEMOS_REPO_PATH}}
      - ls -la

  clone_cli_releases:
    title: Clone CLI Releases Repo
    stage: clone
    image: 'alpine/git:latest'
    working_directory: "/codefresh/volume"
    commands:
      - pwd
      - ls -la
      - rm -rf ${{CLI_RELEASES_REPO_PATH}}
      - 'git clone https://${{CF_REPO_OWNER}}:${{GITHUB_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{CLI_RELEASES_REPO_NAME}}.git ${{CLI_RELEASES_REPO_PATH}}'
      - ls -la
      - cd ${{CLI_RELEASES_REPO_PATH}}
      - ls -la

  clone_homebrew_tap:
    title: Clone Homebrew Tap Repo
    stage: clone
    image: "alpine/git:latest"
    working_directory: "/codefresh/volume"
    commands:
      - pwd
      - ls -la
      - rm -rf ${{HOMEBREW_TAP_REPO_PATH}}
      - "git clone https://${{CF_REPO_OWNER}}:${{GITHUB_TOKEN}}@github.com/${{CF_REPO_OWNER}}/${{HOMEBREW_TAP_REPO_NAME}}.git ${{HOMEBREW_TAP_REPO_PATH}}"
      - ls -la
      - cd ${{HOMEBREW_TAP_REPO_PATH}}
      - ls -la


  inject_version:
    title: Inject Version
    stage: build
    image: kubevious/cicd_deployer:v2
    shell: bash
    working_directory: "${{MAIN_REPO_PATH}}"
    commands:
      - pwd
      - ls -la
      - source ${{CICD_REPO_PATH}}/process-version-bump.sh
      - echo "NEW VERSION=${PRODUCT_VERSION}"
      - source version.sh
      - cf_export PRODUCT_VERSION=${PRODUCT_VERSION}
      - cf_export DOCKER_TAG=${PRODUCT_VERSION}
      - ./scripts/setup-google-action-version.sh
      - ./scripts/setup-pre-commit-hook-version.sh
      - git status

  prepare:
    title: Prepare Dependencies
    stage: build
    image: "kubevious/node-builder:14"
    working_directory: "${{MAIN_REPO_PATH}}"
    commands:
      - yarn install --frozen-lockfile

  compile:
    title: Compile
    stage: build
    image: "kubevious/node-builder:14"
    working_directory: "${{MAIN_REPO_PATH}}"
    commands:
      - ./scripts/prepare-package.sh
      - npm run build

  run_unit_test:
    title: Run Unit Tests
    stage: build
    image: 'kubevious/node-builder:14'
    working_directory: "${{MAIN_REPO_PATH}}"
    commands:
      - pwd
      - ls -la
      - npm test      

  package_npm:
    title: Package NPM
    stage: package
    image: "kubevious/node-builder:14"
    working_directory: "${{MAIN_REPO_PATH}}"
    commands:
      - npm pack
      - ls -la

  npm_package_sample_tests:
    title: NPM Package Sample Tests
    stage: package
    image: 'kubevious/node-with-tools:v14.1'
    working_directory: "${{DEMOS_REPO_PATH}}/guard"
    commands:
      - source ${{MAIN_REPO_PATH}}/version.sh
      - npm install -g ${{MAIN_REPO_PATH}}/kubevious-${PRODUCT_VERSION}.tgz
      - kubevious --version
      - echo "Linting Hipster Shop..."
      - kubevious lint 01-hipster-shop/hipster-chart/templates/manifests.yaml
      - echo "Linting Hipster Shop From Stream..."
      - cat 01-hipster-shop/hipster-chart/templates/manifests.yaml | kubevious lint --stream 
      - echo "Guarding Voter App..."
      - kubevious guard 02-voter-app/voter-chart/templates
      - echo "Guarding Hipster Shop Helm Chart..."
      - kubevious guard 01-hipster-shop/hipster-chart      

  docker_build:
    title: Building Kubevious CLI Image
    stage: package
    type: build
    image_name: "${{IMAGE_NAME}}"
    tag: "${{DOCKER_TAG}}"
    working_directory: "${{MAIN_REPO_PATH}}"
    disable_push: true

  docker_image_sample_tests:
    title: Docker Image Sample Tests
    stage: package
    image: "${{docker_build}}"
    working_directory: "${{DEMOS_REPO_PATH}}/guard"
    commands:    
      - kubevious --version
      - echo "Linting Hipster Shop..."
      - kubevious lint 01-hipster-shop/hipster-chart/templates/manifests.yaml
      - echo "Linting Hipster Shop From Stream..."
      - cat 01-hipster-shop/hipster-chart/templates/manifests.yaml | kubevious lint --stream 
      - echo "Guarding Voter App..."
      - kubevious guard 02-voter-app/voter-chart/templates
      - echo "Guarding Hipster Shop Helm Chart..."
      - kubevious guard 01-hipster-shop/hipster-chart

  # TESTS
  parallel_tests:
    type: parallel
    stage: test
    steps:

      validate_traefik_chart:
        title: Validate Traefik Chart
        stage: test
        image: "${{docker_build}}"
        working_directory: ${{SAMPLES_PATH}}
        commands:    
          - helm version
          - helm repo add traefik https://traefik.github.io/charts
          - helm template traefik/traefik --include-crds > traefik.yaml
          - kubevious lint traefik.yaml
          - kubevious guard traefik.yaml
          - kubevious guard @helm@traefik/traefik@crds=include

      validate_prometheus_chart:
        title: Validate Prometheus Chart
        stage: test
        image: "${{docker_build}}"
        working_directory: ${{SAMPLES_PATH}}
        commands:    
          - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          - kubevious lint @helm@prometheus-community/prometheus
          - kubevious guard @helm@prometheus-community/prometheus

      validate_grafana_chart:
        title: Validate Prometheus Chart
        stage: test
        image: "${{docker_build}}"
        working_directory: ${{SAMPLES_PATH}}
        commands:    
          - helm repo add grafana https://grafana.github.io/helm-charts
          - helm template grafana/grafana --namespace grafana --set persistence.enabled=true > grafana.yaml
          - kubevious lint grafana.yaml
          - kubevious guard grafana.yaml

      validate_kubeflow:
        title: Validate Kubeflow
        stage: test
        image: "${{docker_build}}"
        working_directory: ${{SAMPLES_PATH}}
        commands:
          - ls -la
          - rm -rf kubeflow-pipelines.git
          - git clone https://github.com/kubeflow/pipelines.git kubeflow-pipelines.git
          - kubevious guard kubeflow-pipelines.git/manifests/kustomize/cluster-scoped-resources kubeflow-pipelines.git/manifests/kustomize/env/platform-agnostic ${{DEMOS_REPO_PATH}}/mocks/kubeflow/webhook-server-tls.yaml
          
      validate_istio:
        title: Validate Istio Chart
        stage: test
        image: "${{docker_build}}"
        working_directory: ${{DEMOS_REPO_PATH}}/guard/10-istio-bookinfo
        commands:
          - ls -la
          - echo "Validating Istio Classic..."
          - kubevious guard bookinfo.yaml istio-classic/bookinfo-gateway.yaml istio-classic/destination-rule-all.yaml https://raw.githubusercontent.com/istio/istio/master/manifests/charts/base/crds/crd-all.gen.yaml 
          - echo "Validating Istio Gateway API..."
          - kubevious guard bookinfo.yaml gateway-api/mock-gateway-class.yaml gateway-api/bookinfo-gateway.yaml gateway-api/bookinfo-versions.yaml ${{DEMOS_REPO_PATH}}/mocks/istio/secret-gateway-api-admission.yaml ${{DEMOS_REPO_PATH}}/crds/gateway-api/standard.yaml

      validate_hipster_simple:
        title: Validate Hipster Chart
        stage: test
        image: "${{docker_build}}"
        working_directory: ${{DEMOS_REPO_PATH}}/guard/01-hipster-shop
        commands:
          - kubevious guard hipster-chart

      validate_hipster_network_policies:
        title: Validate Hipster Network Policies
        stage: test
        image: "${{docker_build}}"
        working_directory: ${{DEMOS_REPO_PATH}}/guard/01-hipster-shop
        commands:
          - kubevious guard hipster-chart network-policies-chart

      validate_hipster_network-policies:
        title: Validate Hipster Istio
        stage: test
        image: "${{docker_build}}"
        working_directory: ${{DEMOS_REPO_PATH}}/guard/01-hipster-shop
        commands:
          - kubevious guard hipster-chart istio-chart https://raw.githubusercontent.com/istio/istio/master/manifests/charts/base/crds/crd-all.gen.yaml

      validate_voter:
        title: Validate Voter App
        stage: test
        image: "${{docker_build}}"
        working_directory: ${{DEMOS_REPO_PATH}}/guard/02-voter-app
        commands:
          - kubevious guard voter-chart


  build_all_in_one_binaries:
    title: Build all in one binaries
    stage: release
    image: 'kubevious/node-executable-builder:v1'
    working_directory: "${{MAIN_REPO_PATH}}"
    commands:
      - pkg . --debug --no-bytecode
      - ls -la
      - ls -la binary/

  commit_cli_binaries_repo:
    title: Commit CLI Binaries Repo
    stage: release
    image: codefresh/cli
    working_directory: "${{CICD_REPO_PATH}}"
    commands:
      - ./cli/tasks/collect-and-commit-files.sh

  push_dockerhub:
    title: Pushing Kubevious CLI to DockerHub
    stage: release
    type: push
    image_name: "${{IMAGE_NAME}}"
    registry: "dockerhub"
    candidate: "${{docker_build}}"
    tags:
      - "${{DOCKER_TAG}}"
      - "latest"

  commit_main_repo:
    title: Commit Version Changes
    stage: release
    image: codefresh/cli
    working_directory: "${{MAIN_REPO_PATH}}"
    commands:
      - ${{CICD_REPO_PATH}}/cicd-commit-product-repo.sh

  publish_npm:
    title: Publish NPM
    stage: release
    image: "kubevious/node-builder:14"
    working_directory: "${{MAIN_REPO_PATH}}"
    commands:
      - echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > ~/.npmrc
      - npm publish

  release_homebrew_tap:
    title: Release Homebrew Tap
    stage: release
    image: kubevious/cicd_deployer:v2
    shell: bash
    working_directory: "${{CICD_REPO_PATH}}"
    commands:
      - pwd
      - source ${{MAIN_REPO_PATH}}/version.sh
      - 'echo "VERSION: ${PRODUCT_VERSION}"'
      - curl https://registry.npmjs.org/kubevious/${PRODUCT_VERSION}
      - curl https://registry.npmjs.org/kubevious/latest
      - ./cli/tasks/release-homebrew-tap.sh

  github_release:
    type: github-release
    title: CLI GitHub Release
    description: |-
      # Kubevious v${{PRODUCT_VERSION}}
    arguments:
      release_name: v${{PRODUCT_VERSION}}
      release_tag: v${{PRODUCT_VERSION}}
      draft: true
      files:
        - '${{MAIN_REPO_PATH}}/kubevious-*'
